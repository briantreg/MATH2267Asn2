ans2 <- ggplot(anscombe) +
theme_classic()+
theme(panel.border =
element_rect(colour = "black", fill=NA, size=0.0001))+
geom_point(aes(x2, y2), size=5,color="orange") +
stat_smooth(method='lm',formula=y~x,aes(x1, y1), se=FALSE,
fullrange=TRUE) +
scale_y_continuous(breaks=seq(4,12,2),limit=c(2,14))+
scale_x_continuous(breaks=seq(4,18,2),limit=c(2,20))
ans3 <- ggplot(anscombe) +
theme_classic()+
theme(panel.border =
element_rect(colour = "black", fill=NA, size=0.0001))+
geom_point(aes(x3, y3), size=5,color="orange") +
stat_smooth(method='lm',formula=y~x,aes(x1, y1), se=FALSE,
fullrange=TRUE) +
scale_y_continuous(breaks=seq(4,12,2),limit=c(2,14))+
scale_x_continuous(breaks=seq(4,18,2),limit=c(2,20))
ans4 <- ggplot(anscombe) +
theme_classic()+
theme(panel.border =
element_rect(colour = "black", fill=NA, size=0.0001))+
geom_point(aes(x4, y4), size=5,color="orange") +
stat_smooth(method='lm',formula=y~x,aes(x1, y1), se=FALSE,
fullrange=TRUE) +
scale_y_continuous(breaks=seq(4,12,2),limit=c(2,14))+
scale_x_continuous(breaks=seq(4,18,2),limit=c(2,20))
grid.arrange(ans1, ans2, ans3, ans4, ncol=2)
ans1 <- ggplot(anscombe) +
theme_classic()+
theme(panel.border =
element_rect(colour = "black", fill=NA, size=0.0001))+
geom_point(aes(x1, y1), size=4,color="orange") +
stat_smooth(method='lm',formula=y~x,aes(x1, y1), se=FALSE,
fullrange=TRUE) +
scale_y_continuous(breaks=seq(4,12,2),limit=c(2,14))+
scale_x_continuous(breaks=seq(4,18,2),limit=c(2,20))
ans3 <- ggplot(anscombe) +
theme_classic()+
theme(panel.border =
element_rect(colour = "black", fill=NA, size=0.0001))+
geom_point(aes(x3, y3), size=4,color="orange") +
stat_smooth(method='lm',formula=y~x,aes(x1, y1), se=FALSE,
fullrange=TRUE) +
scale_y_continuous(breaks=seq(4,12,2),limit=c(2,14))+
scale_x_continuous(breaks=seq(4,18,2),limit=c(2,20))
ans2 <- ggplot(anscombe) +
theme_classic()+
theme(panel.border =
element_rect(colour = "black", fill=NA, size=0.0001))+
geom_point(aes(x2, y2), size=4,color="orange") +
stat_smooth(method='lm',formula=y~x,aes(x1, y1), se=FALSE,
fullrange=TRUE) +
scale_y_continuous(breaks=seq(4,12,2),limit=c(2,14))+
scale_x_continuous(breaks=seq(4,18,2),limit=c(2,20))
ans4 <- ggplot(anscombe) +
theme_classic()+
theme(panel.border =
element_rect(colour = "black", fill=NA, size=0.0001))+
geom_point(aes(x4, y4), size=4,color="orange") +
stat_smooth(method='lm',formula=y~x,aes(x1, y1), se=FALSE,
fullrange=TRUE) +
scale_y_continuous(breaks=seq(4,12,2),limit=c(2,14))+
scale_x_continuous(breaks=seq(4,18,2),limit=c(2,20))
grid.arrange(ans1, ans2, ans3, ans4, ncol=2)
ans1 <- ggplot(anscombe) +
theme_classic()+
theme(panel.border =
element_rect(colour = "black", fill=NA, size=0.0001))+
geom_point(aes(x1, y1), size=4.5,color="orange") +
stat_smooth(method='lm',formula=y~x,aes(x1, y1), se=FALSE,
fullrange=TRUE) +
scale_y_continuous(breaks=seq(4,12,2),limit=c(2,14))+
scale_x_continuous(breaks=seq(4,18,2),limit=c(2,20))
ans2 <- ggplot(anscombe) +
theme_classic()+
theme(panel.border =
element_rect(colour = "black", fill=NA, size=0.0001))+
geom_point(aes(x2, y2), size=4.5,color="orange") +
stat_smooth(method='lm',formula=y~x,aes(x1, y1), se=FALSE,
fullrange=TRUE) +
scale_y_continuous(breaks=seq(4,12,2),limit=c(2,14))+
scale_x_continuous(breaks=seq(4,18,2),limit=c(2,20))
ans3 <- ggplot(anscombe) +
theme_classic()+
theme(panel.border =
element_rect(colour = "black", fill=NA, size=0.0001))+
geom_point(aes(x3, y3), size=4.5,color="orange") +
stat_smooth(method='lm',formula=y~x,aes(x1, y1), se=FALSE,
fullrange=TRUE) +
scale_y_continuous(breaks=seq(4,12,2),limit=c(2,14))+
scale_x_continuous(breaks=seq(4,18,2),limit=c(2,20))
ans4 <- ggplot(anscombe) +
theme_classic()+
theme(panel.border =
element_rect(colour = "black", fill=NA, size=0.0001))+
geom_point(aes(x4, y4), size=4.5,color="orange") +
stat_smooth(method='lm',formula=y~x,aes(x1, y1), se=FALSE,
fullrange=TRUE) +
scale_y_continuous(breaks=seq(4,12,2),limit=c(2,14))+
scale_x_continuous(breaks=seq(4,18,2),limit=c(2,20))
grid.arrange(ans1, ans2, ans3, ans4, ncol=2)
grid.arrange(ans1, ans2, ans3, ans4, ncol=2)
?grid.arrange
?grid.arrange()
grid.arrange(ans1, ans2, ans3, ans4, ncol=2,main="Anscombe's Quartet
/n (s3526783)")
grid.arrange(ans1, ans2, ans3, ans4, ncol=2,main="Anscombe's Quartet/n (s3526783)")
grid.arrange(ans1, ans2, ans3, ans4,
ncol=2,top="Anscombe's Quartet/n (s3526783)")
?grid.arrange
grid.arrange(ans1, ans2, ans3, ans4,
ncol=2,top=c("Anscombe's Quartet (s3526783)",size=16)
?grid.arrange
grid.arrange(ans1, ans2, ans3, ans4,
ncol=2,top=c("Anscombe's Quartet (s3526783)",size=16))
grid.arrange(ans1, ans2, ans3, ans4,
ncol=2,top=c("Anscombe's Quartet (s3526783)",size=16))
grid.arrange(ans1, ans2, ans3, ans4,
ncol=2,top=c("Anscombe's Quartet (s3526783)",size=26))
?grid.arrange
ggplot() +
geom_bar(data=diamonds, aes(diamonds$cut)) +
labs(title='Frequency of Diamond Cut Quality in the R "diamond" Dataset \n (s3526783)',
x='Diamond Cut Quality',
y='Frequency'
)+
theme_bw()
ggplot() +
geom_point(data=diamonds, aes(diamonds$carat,diamonds$price),alpha=0.05) +
geom_smooth(se=FALSE, data=diamonds, aes(diamonds$carat,diamonds$price), colour="#CC0000")+
labs(title='Smoothed Average Diamond Price By Carat \n (s3526783)',
x='Diamond Cut Quality',
y='Price ($)'
)+
theme_bw()
ggplot() +
geom_point(data=diamonds, aes(diamonds$carat,diamonds$price,  color=diamonds$color),alpha=0.05) +
geom_smooth(se=FALSE,data=diamonds, aes(diamonds$carat,diamonds$price,  color=diamonds$color))+
labs(title='Smoothed Average Diamond Price Against Carat By Diamond Colour  \n (s3526783)',
x='Diamond Cut Quality',
y='Price ($)'
)+
theme_bw()
ggplot() +
geom_point(data=diamonds, aes(diamonds$carat,diamonds$price,  color=diamonds$color),alpha=0.05) +
geom_smooth(se=FALSE,data=diamonds, aes(diamonds$carat,diamonds$price,  color=diamonds$color))+
labs(title='Smoothed Average Diamond Price Against Carat By Diamond Colour  \n (s3526783)',
x='Diamond Cut Quality',
y='Price ($)',
color='Colour'
)+
theme_bw()
t <- ggplot(data=diamonds, aes(x=cut,y=price,fill=clarity)) +
geom_boxplot() +
stat_summary_bin(aes(x=cut),fun.y=mean, colour="darkred",
geom="point",
shape=17, size=2, position = position_dodge(0.75))+
labs(title='Smoothed Average Diamond Price By Carat \n (s3526783)',
x='Diamond Cut Quality',
y='Price ($)',
color='Clarity')+theme_bw()
t+    facet_grid(color~.)
t <- ggplot(data=diamonds, aes(x=cut,y=price,fill=clarity)) +
geom_boxplot() +
stat_summary_bin(aes(x=cut),fun.y=mean, colour="darkred",
geom="point",
shape=17, size=2, position = position_dodge(0.75))+
labs(title='Distribution of Diamond Price by Cut Quality, Clarity and Colour\n (s3526783)',
x='Diamond Cut Quality',
y='Price ($)',
color='Clarity')+theme_bw()
library(ggplot2)
library(dplyr)
library(gridExtra)
diamonds <- diamonds
ggplot() +
geom_bar(data=diamonds, aes(diamonds$cut)) +
labs(title='Frequency of Diamond Cut Quality in the R "diamond" Dataset \n (s3526783)',
x='Diamond Cut Quality',
y='Frequency'
)+
theme_bw()
ggplot() +
geom_point(data=diamonds, aes(diamonds$carat,diamonds$price),alpha=0.05) +
geom_smooth(se=FALSE, data=diamonds, aes(diamonds$carat,diamonds$price), colour="#CC0000")+
labs(title='Smoothed Average Diamond Price By Carat \n (s3526783)',
x='Carat',
y='Price ($)'
)+
theme_bw()
ggplot() +
geom_point(data=diamonds, aes(diamonds$carat,diamonds$price,  color=diamonds$color),alpha=0.05) +
geom_smooth(se=FALSE,data=diamonds, aes(diamonds$carat,diamonds$price,  color=diamonds$color))+
labs(title='Smoothed Average Diamond Price Against Carat By Diamond Colour  \n (s3526783)',
x='Carat',
y='Price ($)',
color='Colour'
)+
theme_bw()
t <- ggplot(data=diamonds, aes(x=cut,y=price,fill=clarity)) +
geom_boxplot() +
stat_summary_bin(aes(x=cut),fun.y=mean, colour="darkred",
geom="point",
shape=17, size=2, position = position_dodge(0.75))+
labs(title='Distribution of Diamond Price by Cut Quality, Clarity and Colour\n (s3526783)',
x='Diamond Cut Quality',
y='Price ($)',
color='Clarity')+theme_bw()
t+    facet_grid(color~.)
ans1 <- ggplot(anscombe) +
theme_classic()+
theme(panel.border =
element_rect(colour = "black", fill=NA, size=0.0001))+
geom_point(aes(x1, y1), size=4.5,color="orange") +
stat_smooth(method='lm',formula=y~x,aes(x1, y1), se=FALSE,
fullrange=TRUE) +
scale_y_continuous(breaks=seq(4,12,2),limit=c(2,14))+
scale_x_continuous(breaks=seq(4,18,2),limit=c(2,20))
ans2 <- ggplot(anscombe) +
theme_classic()+
theme(panel.border =
element_rect(colour = "black", fill=NA, size=0.0001))+
geom_point(aes(x2, y2), size=4.5,color="orange") +
stat_smooth(method='lm',formula=y~x,aes(x1, y1), se=FALSE,
fullrange=TRUE) +
scale_y_continuous(breaks=seq(4,12,2),limit=c(2,14))+
scale_x_continuous(breaks=seq(4,18,2),limit=c(2,20))
ans3 <- ggplot(anscombe) +
theme_classic()+
theme(panel.border =
element_rect(colour = "black", fill=NA, size=0.0001))+
geom_point(aes(x3, y3), size=4.5,color="orange") +
stat_smooth(method='lm',formula=y~x,aes(x1, y1), se=FALSE,
fullrange=TRUE) +
scale_y_continuous(breaks=seq(4,12,2),limit=c(2,14))+
scale_x_continuous(breaks=seq(4,18,2),limit=c(2,20))
ans4 <- ggplot(anscombe) +
theme_classic()+
theme(panel.border =
element_rect(colour = "black", fill=NA, size=0.0001))+
geom_point(aes(x4, y4), size=4.5,color="orange") +
stat_smooth(method='lm',formula=y~x,aes(x1, y1), se=FALSE,
fullrange=TRUE) +
scale_y_continuous(breaks=seq(4,12,2),limit=c(2,14))+
scale_x_continuous(breaks=seq(4,18,2),limit=c(2,20))
grid.arrange(ans1, ans2, ans3, ans4,
ncol=2,top="Anscombe's Quartet (s3526783)")
ggplot() +
geom_point(data=diamonds, aes(diamonds$carat,diamonds$price),alpha=0.05, color="grey") +
geom_smooth(se=FALSE, data=diamonds, aes(diamonds$carat,diamonds$price), colour="#CC0000")+
labs(title='Smoothed Average Diamond Price By Carat \n (s3526783)',
x='Carat',
y='Price ($)'
)+
theme_bw()
ggplot() +
geom_point(data=diamonds, aes(diamonds$carat,diamonds$price),alpha=0.05, colour="grey") +
geom_smooth(se=FALSE, data=diamonds, aes(diamonds$carat,diamonds$price), colour="#CC0000")+
labs(title='Smoothed Average Diamond Price By Carat \n (s3526783)',
x='Carat',
y='Price ($)'
)+
theme_bw()
?annotate
ggplot() +
geom_point(data=diamonds, aes(diamonds$carat,diamonds$price),alpha=0.05, colour="grey") +
geom_smooth(se=FALSE, data=diamonds, aes(diamonds$carat,diamonds$price), colour="#CC0000")+
labs(title='Diamond Price By Carat \n (s3526783)',
x='Carat',
y='Price ($)'
)+
theme_bw() +
annotate("text", x=3,y=15500,colour="darkred",label="Smoothed Average")
library(ggplot2)
library(dplyr)
library(gridExtra)
diamonds <- diamonds
ggplot() +
geom_bar(data=diamonds, aes(diamonds$cut)) +
labs(title='Frequency of Diamond Cut Quality \n (s3526783)',
x='Diamond Cut Quality',
y='Frequency'
)+
theme_bw()
ggplot() +
geom_point(data=diamonds, aes(diamonds$carat,diamonds$price),alpha=0.05, colour="grey") +
geom_smooth(se=FALSE, data=diamonds, aes(diamonds$carat,diamonds$price), colour="#CC0000")+
labs(title='Diamond Price By Carat With Smoothed Average Line \n (s3526783)',
x='Carat',
y='Price ($)'
)+
theme_bw()
ggplot() +
geom_point(data=diamonds, aes(diamonds$carat,diamonds$price,  color=diamonds$color),alpha=0.05) +
geom_smooth(se=FALSE,data=diamonds, aes(diamonds$carat,diamonds$price,  color=diamonds$color))+
labs(title='Diamond Price Against Carat By Diamond Colour With Smoothed Average Lines \n (s3526783)',
x='Carat',
y='Price ($)',
color='Colour'
)+
theme_bw()
t <- ggplot(data=diamonds, aes(x=cut,y=price,fill=clarity)) +
geom_boxplot() +
stat_summary_bin(aes(x=cut),fun.y=mean, colour="darkred",
geom="point",
shape=17, size=2, position = position_dodge(0.75))+
labs(title='Distribution of Diamond Price by Cut Quality, Clarity and Colour\n (s3526783)',
x='Diamond Cut Quality',
y='Price ($)',
color='Clarity')+theme_bw()
t+    facet_grid(color~.)
ans1 <- ggplot(anscombe) +
theme_classic()+
theme(panel.border =
element_rect(colour = "black", fill=NA, size=0.0001))+
geom_point(aes(x1, y1), size=4.5,color="orange") +
stat_smooth(method='lm',formula=y~x,aes(x1, y1), se=FALSE,
fullrange=TRUE) +
scale_y_continuous(breaks=seq(4,12,2),limit=c(2,14))+
scale_x_continuous(breaks=seq(4,18,2),limit=c(2,20))
ans2 <- ggplot(anscombe) +
theme_classic()+
theme(panel.border =
element_rect(colour = "black", fill=NA, size=0.0001))+
geom_point(aes(x2, y2), size=4.5,color="orange") +
stat_smooth(method='lm',formula=y~x,aes(x1, y1), se=FALSE,
fullrange=TRUE) +
scale_y_continuous(breaks=seq(4,12,2),limit=c(2,14))+
scale_x_continuous(breaks=seq(4,18,2),limit=c(2,20))
ans3 <- ggplot(anscombe) +
theme_classic()+
theme(panel.border =
element_rect(colour = "black", fill=NA, size=0.0001))+
geom_point(aes(x3, y3), size=4.5,color="orange") +
stat_smooth(method='lm',formula=y~x,aes(x1, y1), se=FALSE,
fullrange=TRUE) +
scale_y_continuous(breaks=seq(4,12,2),limit=c(2,14))+
scale_x_continuous(breaks=seq(4,18,2),limit=c(2,20))
ans4 <- ggplot(anscombe) +
theme_classic()+
theme(panel.border =
element_rect(colour = "black", fill=NA, size=0.0001))+
geom_point(aes(x4, y4), size=4.5,color="orange") +
stat_smooth(method='lm',formula=y~x,aes(x1, y1), se=FALSE,
fullrange=TRUE) +
scale_y_continuous(breaks=seq(4,12,2),limit=c(2,14))+
scale_x_continuous(breaks=seq(4,18,2),limit=c(2,20))
grid.arrange(ans1, ans2, ans3, ans4,
ncol=2,top="Anscombe's Quartet (s3526783)")
?unzip
read.csv2(file="NODE_ID_COMPLEX_INT_ID.csv.zip")
setwd("C:/Users/Brian/Desktop/Data Vis Assignment 2 - Crash Stats/Data")
read.csv2(file="NODE_ID_COMPLEX_INT_ID.csv.zip")
read.csv2(file="NODE_ID_COMPLEX_INT_ID.zip")
read.csv2(file="NODE_ID_COMPLEX_INT_ID.csv")
?unz
read.csv2(unz(file="NODE_ID_COMPLEX_INT_ID.csv"))
read.csv2(unz(description = "ACCIDENT.zip",file="NODE_ID_COMPLEX_INT_ID.csv"))
NODE_ID_COMPLEX_INT_ID <- read.csv2(unz(description = "ACCIDENT.zip",
file="NODE_ID_COMPLEX_INT_ID.csv"))
NODE_ID_COMPLEX_INT_ID <- read.csv2(unz(description = "ACCIDENT.zip",
file="NODE_ID_COMPLEX_INT_ID.csv"), sep=',')
ls("ACCIDENT.zip")
ls("\ACCIDENT.zip")
unxizip("ACCIDENT.zip",list=TRUE)
unzip("ACCIDENT.zip",list=TRUE)
unzip("ACCIDENT.zip",list=TRUE)$Name
Accident<- unzip("ACCIDENT.zip",list=TRUE)$Name
Accident
for(i in Accident)
{prin(Accident)}
){
for(i in Accident){print(Accident)}
n(Accident)
length(Accident)
for(i in 1:length(Accident)){print(Accident)}
for(i in 1:length(Accident)){print(Accident[i])}
for(i in 1:length(Accident)){
print(sub(".csv","",Accident[i]))}
for(i in 4:5){
sub(".csv","",Accident[i]) <-
read.csv2(unz(description = "ACCIDENT.zip",
file=Accident[i]),
sep=',')
}
Accident<- unzip("ACCIDENT.zip",list=TRUE)$Name
for(i in 4:5){
sub(".csv","",Accident[i]) <-
read.csv2(unz(description = "ACCIDENT.zip",
file=Accident[i]),
sep=',')
}
Accident[i]
for(i in 4:5){
name_target <- sub(".csv","",Accident[i]) <-
name_target <-    read.csv2(unz(description = "ACCIDENT.zip",
file=Accident[i]),
sep=',')
}
read.csv2(unz(description = "ACCIDENT.zip",
file=Accident[4]),
sep=',')
sub(".csv","",Accident[4]) <- read.csv2(unz(description = "ACCIDENT.zip",
file=Accident[4]),
sep=',')
s <- sub(".csv","",Accident[4])
s <- read.csv2(unz(description = "ACCIDENT.zip",
file=Accident[4]),
sep=',')
library(magrittr)
for(i in 4:5){
read.csv2(
unz(description = "ACCIDENT.zip",
file=Accident[i]),
sep=',') %>%
assign(
sub(".csv","",Accident[i]) ,
.)
}
assign(sub(".csv","",Accident[4]), read.csv2(unz(description = "ACCIDENT.zip",
file=Accident[4]),
sep=',')
NODE_ID_COMPLEX_INT_ID <- read.csv2(unz(description = "ACCIDENT.zip",
file="NODE_ID_COMPLEX_INT_ID.csv"),
sep=',')
ls()
read.csv2(
unz(description = "ACCIDENT.zip",
file=Accident[4]),
sep=',') %>%
assign(
sub(".csv","",Accident[4]]) ,
.)
read.csv2(
unz(description = "ACCIDENT.zip",
file=Accident[4]),
sep=',') %>%
assign(
sub(".csv","",Accident[4]) ,
.)
?assign
%>%
assign(
sub(".csv","",Accident[4]) ,
read.csv2(
unz(description = "ACCIDENT.zip",
file=Accident[4]),
sep=','))
s
s   %>%
aggregate(NODE_ID~COMPLEX_INT_NO, length)
?aggregate
s   %>%
aggregate(NODE_ID~COMPLEX_INT_NO, .,length)
for(i in 4:5){
assign(
sub(".csv","",Accident[i]) ,
read.csv2(
unz(description = "ACCIDENT.zip",
file=Accident[i]),
sep=','))
}
Accident<- unzip("ACCIDENT.zip",list=TRUE)$Name
for(i in 4:5){
assign(
sub(".csv","",Accident[i]) ,
read.csv2(
unz(description = "ACCIDENT.zip",
file=Accident[i]),
sep=','))
}
library(magrittr)
Accident<- unzip("ACCIDENT.zip",list=TRUE)$Name
for(i in length(Accident)){
assign(
sub(".csv","",Accident[i]) ,
read.csv2(
unz(description = "ACCIDENT.zip",
file=Accident[i]),
sep=','))
}
for(i in 1:length(Accident)){
assign(
sub(".csv","",Accident[i]) ,
read.csv2(
unz(description = "ACCIDENT.zip",
file=Accident[i]),
sep=','))
}
Accident
length(Accident)
read.csv2(
unz(description = "ACCIDENT.zip",
file="Statistic Checks.csv"),
sep=','))
read.csv2(
unz(description = "ACCIDENT.zip",
file="Statistic Checks.csv"),
sep=',')
?source
source("1_Load_andClean_Data_Assgn2.R")
setwd("../data")
getwd()
setwd("..")
getwd()
setwd("../data")
getwd()
setwd("/data")
setwd("../data")
setwd("./data")
getwd()
